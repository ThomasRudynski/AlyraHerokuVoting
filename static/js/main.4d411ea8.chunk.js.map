{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","owner","componentDidMount","eth","handleRevert","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","setState","runInit","affectOwner","contractOwner","alert","error","on","location","href","whitelistVoter","value","methods","send","from","firstPart","message","substring","search","startProposalRegistration","addProposal","document","getElementById","endProposalRegistration","startVotingSession","vote","endVotingSession","votesCalculation","getWinnerInfo","call","node","createTextNode","p","createElement","className","appendChild","getOwner","this","result","String","toLowerCase","id","Container","Row","Col","Card","Header","Body","Form","Group","controlId","Label","Control","type","ref","input","Button","onClick","variant","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d411ea8.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Voting from \"./contracts/Voting.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n\r\n  //Variables globales de la classe\r\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, owner: null };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n      web3.eth.handleRevert = true;\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Voting.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        Voting.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\r\n      const contractOwner = await this.affectOwner();\r\n      this.setState({ owner: contractOwner })\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  //Fonction qui permet de recharger la page en cas de changement d'adresse \r\n  runInit = async () => {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n      window.location.href = \"http://localhost:3000\";\r\n    });\r\n  }\r\n\r\n\r\n  //Ajoute un utilisateur sur la liste blanche\r\n  whitelistVoter = async () => {\r\n    const { accounts, contract } = this.state;\r\n    const address = this.address.value;\r\n\r\n    // Interaction avec le smart contract pour ajouter un compte \r\n    try {\r\n      await contract.methods.whitelistVoter(address).send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Débute la phase d'enregistrement des propositions\r\n  startProposalRegistration = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.startProposalRegistration().send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Ajoute une proposition à la liste\r\n  addProposal = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.addProposal(document.getElementById(\"description\").value).send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Termine la phase d'enregistrement des propositions\r\n  endProposalRegistration = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.endProposalRegistration().send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Débute la phase de vote\r\n  startVotingSession = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.startVotingSession().send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Enregistrement d'un vote\r\n  vote = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.vote(document.getElementById(\"idProposal\").value).send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Termine la phase de vote\r\n  endVotingSession = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.endVotingSession().send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  // Calcule le résultat final (la proposition gagnante)\r\n  votesCalculation = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      await contract.methods.votesCalculation().send({ from: accounts[0] });\r\n    } catch (e) {\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  //Renvoie les informations de la proposition gagnante\r\n  getWinnerInfo = async () => {\r\n    const { accounts, contract } = this.state;\r\n    // Interaction avec le smart contract pour démarrer l'enregistrement des propositions\r\n    try {\r\n      const node = document.createTextNode(\"Gagnant : \" + await contract.methods.getWinnerInfo().call({ from: accounts[0] }));\r\n      const p = document.createElement(\"p\");\r\n      p.className = \"info\";\r\n      p.appendChild(node)\r\n      document.getElementById(\"winnerInfo\").appendChild(p);\r\n    } catch (e) {\r\n      alert(e);\r\n      var firstPart = e.message.substring(e.message.search(\"VM\"))\r\n      alert(firstPart.substring(0, firstPart.search('\"')));\r\n    }\r\n  }\r\n\r\n  getOwner = function () {\r\n    const { contract } = this.state;\r\n    return new Promise(function (resolve) {\r\n      resolve(contract.methods.owner().call());\r\n    })\r\n  }\r\n\r\n  affectOwner = async () => {\r\n    var result = await this.getOwner()\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n\r\n    //OWNER VIEW\r\n    if (String(this.state.owner).toLowerCase() === String(this.state.accounts[0]).toLowerCase()) {\r\n      return (\r\n        <div className=\"App\">\r\n          <div>\r\n            <h2 className=\"text-center title\">Système de vote</h2>\r\n            <p className=\"text-center\" id=\"userAddress\">Adresse de l'utilisateur : {this.state.accounts[0]}</p>\r\n            <hr></hr>\r\n          </div>\r\n          <Container>\r\n            <Row>\r\n              <Col>\r\n                <h3>Administrateur</h3>\r\n                <Card className='m-2 mt-4'>\r\n                  <Card.Header><strong>Ajouter un nouveau compte à la liste blanche</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Form.Group controlId=\"formAddress\">\r\n                      <Form.Label>Adresse de l'utilisateur : </Form.Label>\r\n                      <Form.Control type=\"text\" id=\"address\" ref={(input) => { this.address = input }} className=\"input\" />\r\n                    </Form.Group>\r\n                    <Button onClick={this.whitelistVoter} variant=\"dark\" className=\"button\"> Autoriser </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Démarrer l'enregistrement des propositions</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Button onClick={this.startProposalRegistration} variant=\"dark\" className=\"button\"> Démarrer </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Terminer l'enregistrement des propositions</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Button onClick={this.endProposalRegistration} variant=\"dark\" className=\"button\"> Terminer </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Démarrer la session de vote</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Button onClick={this.startVotingSession} variant=\"dark\" className=\"button\"> Démarrer </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Terminer la session de vote</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Button onClick={this.endVotingSession} variant=\"dark\" className=\"button\"> Terminer </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Calculer les résultats</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Button onClick={this.votesCalculation} variant=\"dark\" className=\"button\"> Calculer </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n\r\n              <Col>\r\n                <h3>Utilisateur</h3>\r\n                <Card className='m-2 mt-4'>\r\n                  <Card.Header><strong>Ajouter une proposition</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Form.Group controlId=\"formDescription\">\r\n                      <Form.Label>Description de la proposition : </Form.Label>\r\n                      <Form.Control type=\"text\" id=\"description\" className=\"input\" />\r\n                    </Form.Group>\r\n                    <Button onClick={this.addProposal} variant=\"dark\" className=\"button\"> Ajouter </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Vote</strong></Card.Header>\r\n                  <Card.Body>\r\n                    <Form.Group controlId=\"formId\">\r\n                      <Form.Label>ID de la proposition : </Form.Label>\r\n                      <Form.Control type=\"text\" id=\"idProposal\" className=\"input\" />\r\n                    </Form.Group>\r\n                    <Button onClick={this.vote} variant=\"dark\" className=\"button\"> Voter </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n\r\n                <Card className='m-2'>\r\n                  <Card.Header><strong>Résultats</strong></Card.Header>\r\n                  <Card.Body id=\"winnerInfo\">\r\n                    <Button onClick={this.getWinnerInfo} variant=\"dark\" className=\"button\"> Obtenir les résultats </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n\r\n          <br></br>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    //USER VIEW\r\n    if (String(this.state.owner).toLowerCase() !== String(this.state.accounts[0]).toLowerCase()) {\r\n      return (\r\n        <div className=\"App\">\r\n          <div>\r\n            <h2 className=\"text-center title\">Système de vote</h2>\r\n            <p className=\"text-center\" id=\"userAddress\">Adresse de l'utilisateur : {this.state.accounts[0]}</p>\r\n            <hr></hr>\r\n          </div>\r\n\r\n          <Container>\r\n            <Col>\r\n              <Row>\r\n                <Col></Col>\r\n                <Col>\r\n                  <Card>\r\n                    <Card.Header><strong>Ajouter une proposition</strong></Card.Header>\r\n                    <Card.Body>\r\n                      <Form.Group controlId=\"formDescription\">\r\n                        <Form.Label>Description de la proposition : </Form.Label>\r\n                        <Form.Control type=\"text\" id=\"description\" className=\"input\" />\r\n                      </Form.Group>\r\n                      <Button onClick={this.addProposal} variant=\"dark\" className=\"button\"> Ajouter </Button>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col></Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Col></Col>\r\n                <Col>\r\n                  <Card>\r\n                    <Card.Header><strong>Vote</strong></Card.Header>\r\n                    <Card.Body>\r\n                      <Form.Group controlId=\"formId\">\r\n                        <Form.Label>ID de la proposition : </Form.Label>\r\n                        <Form.Control type=\"text\" id=\"idProposal\" className=\"input\" />\r\n                      </Form.Group>\r\n                      <Button onClick={this.vote} variant=\"dark\" className=\"button\"> Voter </Button>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col></Col>\r\n\r\n              </Row>\r\n\r\n              <Row>\r\n                <Col></Col>\r\n                <Col>\r\n                  <Card>\r\n                    <Card.Header><strong>Résultats</strong></Card.Header>\r\n                    <Card.Body id=\"winnerInfo\">\r\n                      <Button onClick={this.getWinnerInfo} variant=\"dark\" className=\"button\"> Obtenir les résultats </Button>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col></Col>\r\n\r\n              </Row>\r\n            </Col>\r\n          </Container>\r\n\r\n          <br></br>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}